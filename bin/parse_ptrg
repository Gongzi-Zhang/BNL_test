#!/usr/bin/env python3
# coding: utf-8

'''
parse ptrg file

usage: ./parse_ptrg.py run_number
'''

import os
import sys
import pandas as pd
import json
import ROOT
from utilities import *
from db_utilities import *

class parsePtrg:
    def __init__(self, run):
        db = caliDB()
        runType = db.getRunType(run)
        if runType != 'ptrg':
            logger.fatal(f'run {run} is not a ptrg run')
            exit(4)

        self.run = run
        self.listFile = f'{cali.CALIROOT}/data/Run{run}_list.txt'
        if not os.path.isfile(self.listFile):
            logger.fatal(f'no list file found for run {run}')
            exit(4)

        logger.info(f'will process run: {run}')

        self.outFile = f'{cali.CALIROOT}/data/Run{run}_hist.root'
        logger.info(f'output file: {self.outFile}')

        self.pedFile = f'{cali.CALIROOT}/data/Run{run}_ped.json' 

        self.h1 = {}
        self.gPed = {}
        self.func = {}
        xmax = {'LG': 500, 'HG': 1000}
        for gain in cali.gains:
            self.func[gain] = ROOT.TF1(gain, "gaus", 0, xmax[gain])
            self.gPed[gain] = ROOT.TGraphErrors()
            for ch in range(0, cali.nChannels):
                hname = f'Ch_{ch}_{gain}'
                self.h1[hname] = ROOT.TH1F(hname, hname, 250, 0, xmax[gain])

        ROOT.gROOT.SetBatch(1)

    def parse(self):
        with open(self.listFile, 'r') as fin:
            ''' skip the first 9 lines '''
            for l in range(9):
                next(fin)

            ch = 0
            bd = 0
            LG = 0
            HG = 0

            for line in fin:
                line = line.strip()
                values = line.split()
                if 6 == len(values):
                    bd = int(values[2])
                    ch = int(values[3])
                    LG = int(values[4])
                    HG = int(values[5])
                elif 4 == len(values):
                    bd = int(values[0])
                    ch = int(values[1])
                    LG = int(values[2])
                    HG = int(values[3])
                else:
                    logger.error(f'Invalide values in event {event}')
                    logger.info(values)
                    continue

                ch += 64*bd
                self.h1[f'Ch_{ch}_LG'].Fill(LG) 
                self.h1[f'Ch_{ch}_HG'].Fill(HG) 

    def fit(self):
        ped = {}
        for gain in cali.gains:
            ped[gain] = {}
            f = self.func[gain]
            ipoint = 0
            for ch in range(0, cali.nChannels):
                name = f'Ch_{ch}_{gain}'
                h = self.h1[name]
                f.SetParameters(h.GetMaximum(), h.GetMean(), h.GetRMS())
                h.Fit(f)
                mean = f.GetParameter(1)
                rms  = f.GetParameter(2)
                # ped[gain][ch] = {"m": mean, "r": rms}
                ped[gain][ch] = [mean, rms]
                self.gPed[gain].SetPoint(ipoint, ch, mean)
                self.gPed[gain].SetPointError(ipoint, 0, rms)
                ipoint += 1

        with open(self.pedFile, 'w') as f:
            f.write(json.dumps(ped))

    def write(self):
        fout = ROOT.TFile.Open(self.outFile, "recreate")
        fout.cd()
        for h in self.h1.keys():
            self.h1[h].Write()
        fout.Close()

        c = ROOT.TCanvas("c", "c", 1500, 600)
        c.cd()
        for gain in cali.gains:
            self.gPed[gain].SetTitle(f'Run {self.run} {gain} pedestal;ch;ADC')
            self.gPed[gain].GetXaxis().CenterTitle()
            self.gPed[gain].GetYaxis().CenterTitle()
            self.gPed[gain].SetMarkerStyle(20)
            self.gPed[gain].Draw("AP")
            c.SaveAs(f'{cali.CALIROOT}/figures/ptrg/run{self.run}_{gain}_ped.png')

def usage():
    print(sys.argv[0] + ' [-h] run_number')
    print('\t-h: print this help message')

if __name__ == '__main__':
    # read in command line arguments
    run = 0
    i=1
    while i<len(sys.argv):
        if '-h' == sys.argv[i]:
            usage()
            exit(0)
        else:
            run = int(sys.argv[i])
            cali.setRun(run)
        i += 1

    f = parsePtrg(run)
    f.parse()
    f.fit()
    f.write()
